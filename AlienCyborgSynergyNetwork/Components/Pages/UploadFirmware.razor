@page "/firmware"
@inject HttpClient client
@using System.Collections.Concurrent;
@inject HubConnection hub


<h3>Upload Firmware</h3>

<input @bind="version" placeholder="Version" class="form-checkcarousel-control-next mb-2" />
<InputFile OnChange="e => file = e.File" class="mb-2" />

<button class="btn btn-primary" @onclick="Upload">Upload</button>
@if (!string.IsNullOrEmpty(msg))
{
	<div class="alert alert-info mt-2">
		@msg
	</div>
}
<hr />

<a href="api/firmware/latest" target="_blank" class="btn btn-secondary">
	Download latest firmware
</a>

@if (jobs.IsEmpty)
{
	<p><em>No Firmware updates right now...</em></p>
}
else
{
	@foreach (var job in jobs)
	{
		<div class="mb-3">
			<strong>Version: @job.Key</strong>
			<div class="progress">
				<div class="progress-bar" role="progressbar" style="width:@job.Value%">
					@job.Value%
				</div>
			</div>
		</div>
	}

}


@code {
	private IBrowserFile? file;
	private string version = "";
	private string msg = String.Empty;

	private readonly ConcurrentDictionary<string, int> jobs = new();

	private async Task Upload()
	{
		if (string.IsNullOrWhiteSpace(version) || file is null)
		{
			msg = "Please select a file and enter a version.";
			return;
		}

		MultipartFormDataContent content;

		content = new MultipartFormDataContent
		{
			{new StringContent(version), "version"},
			{new StreamContent(file.OpenReadStream(maxAllowedSize: 1024 * 1024 * 10)), "firmware",file.Name}
		};


		var response = await client.PostAsync("api/firmware", content);
		if (response.IsSuccessStatusCode)
		{
			msg = "Firmware uploaded successfully.";
		}
		else
		{
			msg = $"Error uploading firmware: {response.ReasonPhrase}";
		}
	}

	protected override async Task OnInitializedAsync()
	{
		hub.On<string, int>("FirmwareProgress", (ver, pct) =>
		{
			jobs[ver] = pct;
			InvokeAsync(StateHasChanged);

		});

		if (hub.State == HubConnectionState.Disconnected)
		{
			await hub.StartAsync();
		}
	}
}
