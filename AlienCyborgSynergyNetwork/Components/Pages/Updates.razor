@page "/updates"
@using System.Collections.Concurrent;
@inject HubConnection hub

<h3>Updates</h3>


@if (jobs.IsEmpty)
{
	<p><em>No Firmware updates right now...</em></p>
}
else
{
	@foreach (var job in jobs)
	{
		<div class="mb-3">
			<strong>Version: @job.Key</strong>
			<div class="progress">
				<div class="progress-bar" role="progressbar" style="width:@job.Value%">
					@job.Value%
				</div>
			</div>
		</div>
	}

}

@code {
	private readonly ConcurrentDictionary<string, int> jobs = new();

	protected override async Task OnInitializedAsync()
	{
		hub.On<string, int>("FirmwareProgress", (ver, pct) =>
		{
			jobs[ver] = pct;
			InvokeAsync(StateHasChanged);

		});

		if (hub.State == HubConnectionState.Disconnected)
		{
			await hub.StartAsync();
		}
	}
}
	
